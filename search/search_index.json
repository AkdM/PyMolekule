{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the PyMolekule documentation!","text":""},{"location":"#about-molekule","title":"About Molekule","text":"<p>See their official website.</p>"},{"location":"#about-pymolekule","title":"About PyMolekule","text":"<p>PyMolekule is a simple wrapper around the Molekule API, so that it is easy to connect, view and control your Molekule air purifier.</p>"},{"location":"#installation","title":"Installation","text":"<p>TODO</p>"},{"location":"#usage","title":"Usage","text":"<p>TODO</p>"},{"location":"#documentation","title":"Documentation","text":"<p>WIP, but here</p>"},{"location":"#generate-documentation","title":"Generate Documentation","text":""},{"location":"#to-install","title":"To install:","text":"<ul> <li><code>pip install setuptools</code></li> <li><code>pip install mkdocs</code></li> <li><code>pip install mkdocs-material</code></li> <li><code>pip install novella</code></li> <li><code>pip install pydoc-markdown</code></li> </ul>"},{"location":"#generate","title":"Generate","text":"<p>A makefile is available to do multiple things: - .PHONY: using <code>make</code> will defaults to <code>make clean build_docs</code> - <code>clean</code>: cleans docs folder - <code>build_docs</code>: build the docs using mkdocs - <code>serve_docs</code>: live documentation. Useful when actively working on the documentation! - <code>publish_docs</code>: publish the docs to the gh-pages branch</p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>requests</li> <li>boto3</li> <li>pycognito</li> <li>loguru</li> <li>pyjwt</li> <li>pydantic</li> </ul>"},{"location":"#author","title":"Author","text":"<ul> <li>Anthony Da Mota [Website] / [Twitter] / [LinkedIn]</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions, issues and feature requests are welcome!Feel free to check issues page. I should add a <code>CONTRIBUTING.md</code> file too.</p>"},{"location":"#show-your-support","title":"Show your support","text":"<p>Give a \u2b50\ufe0f if this project helped you! If you're interested in donating you can buy me a hot chocolate right here!</p>"},{"location":"#license","title":"License","text":"<p>This open source project is GNU Affero General Public License v3.0 licensed.</p>"},{"location":"api/pymolekule.exceptions/","title":"Exceptions","text":"<p>PyMolekule exceptions</p> <p></p> <p></p>"},{"location":"api/pymolekule.exceptions/#class-pmawssrpautherror","title":"Class PMAwsSrpAuthError","text":"<pre><code>class PMAwsSrpAuthError(Exception)\n</code></pre> <p>[view_source]</p> <p>Exception</p> <p>Exception raised when AWS SRP credentials are incorrect</p>"},{"location":"api/pymolekule.models.account/","title":"Models.Account","text":"<p>Account model</p> <p></p> <p></p>"},{"location":"api/pymolekule.models.account/#class-account","title":"Class Account","text":"<pre><code>class Account(BaseModel)\n</code></pre> <p>[view_source]</p> <p>Account model</p> <p>Arguments:</p> <ul> <li><code>name</code> str, optional - Account holder name</li> <li><code>email</code> str, optional - Email address tied to the provided account</li> <li><code>devices</code> list, optional - List of devices, from the <code>Device</code> model</li> </ul>"},{"location":"api/pymolekule.models.device/","title":"Models.Device","text":"<p>Device model</p> <p></p> <p></p>"},{"location":"api/pymolekule.models.device/#class-devicemodel","title":"Class DeviceModel","text":"<pre><code>class DeviceModel(BaseModel)\n</code></pre> <p>[view_source]</p> <p>Device model</p> <p>A device can be found in an account, see the <code>AccountModel</code> model</p> <p>Arguments:</p> <ul> <li><code>name</code> str - Name of the Molekule device</li> <li><code>serial_number</code> str - Serial number of the Molekule device</li> <li><code>firmware</code> str - Firmware number of the Molekule device</li> <li><code>model</code> str - Model of the Molekule device</li> <li><code>mac_address</code> str - MAC address of the Molekule device</li> <li><code>online</code> bool - Online status of the Molekule device</li> <li><code>mode</code> str - Protect mode of the Molekule device. Can be <code>smart</code> (which is Auto Protect in the app) or <code>manual</code></li> <li><code>silent</code> str, optional - Quiet mode in the app, which can be found under Auto Protect &gt; Quiet</li> <li><code>fan_speed</code> int - This is the fan speed from the manual mode only, interval:<code>[1,6]</code></li> <li><code>burst</code> int - Not sure what it is exactly, but values are <code>[0, 1, 2]</code></li> <li><code>aqi</code> str - Air Quality Index, values are <code>['good', 'moderate', 'bad', 'very_bad']</code></li> <li><code>filter_state</code> int - PECO filter state. Percentage with the following interval <code>[0,100]</code></li> </ul> <p></p> <p></p>"},{"location":"api/pymolekule.models.device/#class-device","title":"Class Device","text":"<pre><code>class Device(DeviceModel)\n</code></pre> <p>[view_source]</p> <p></p> <p></p>"},{"location":"api/pymolekule.models.device/#control","title":"control","text":"<pre><code>def control(smart: bool = 1,\n            quiet: bool = False,\n            fan_speed: int = None) -&gt; Optional[dict]\n</code></pre> <p>[view_source]</p> <p>control Control device state</p> <p>Arguments:</p> <ul> <li><code>smart</code> (<code>bool, optional</code>): description, defaults to 1</li> <li><code>quiet</code> (<code>bool, optional</code>): description, defaults to False</li> <li><code>fan_speed</code> (<code>int, optional</code>): description, defaults to None</li> </ul> <p>Returns:</p> <p><code>Optional[dict]</code>: description</p> <p></p> <p></p>"},{"location":"api/pymolekule.models.device/#sensor_history","title":"sensor_history","text":"<pre><code>def sensor_history(date_start: int = None,\n                   date_end: int = None) -&gt; Optional[dict]\n</code></pre> <p>[view_source]</p> <p>sensor_data Retrieve historical sensor data from the provided device between two dates</p> <p>Arguments:</p> <ul> <li><code>date_start</code> (<code>int, optional</code>): description, defaults to None</li> <li><code>date_end</code> (<code>int, optional</code>): description, defaults to None</li> </ul> <p>Returns:</p> <p><code>Optional[dict]</code>: description</p>"},{"location":"api/pymolekule.molekule/","title":"Molekule","text":"<p>Main PyMolekule Molekule class that provides essential API work with AWS and Molekule servers.</p> <p></p> <p></p>"},{"location":"api/pymolekule.molekule/#class-molekule","title":"Class Molekule","text":"<pre><code>class Molekule()\n</code></pre> <p>[view_source]</p> <p>Constructor</p> <p>Main PyMolekule class that provides essential API work with AWS and Molekule servers</p> <p>Arguments:</p> <ul> <li><code>username</code> str, optional - The email from the provided Molekule account. If not provided along with the <code>password</code> arg, use <code>jwt</code>. Defaults to <code>None</code></li> <li><code>password</code> str, optional - The password from the provided Molekule account. If not provided along with the <code>username</code> arg, use <code>jwt</code>. Defaults to <code>None</code></li> <li><code>jwt</code> str, optional - Default jwt obtained after a successful login. Defaults to <code>None</code></li> <li><code>pool_id</code> str, optional - Pool ID to use for the AWS SRP authentication. Defaults to <code>'us-west-2_KqrEZKC6r'</code></li> <li><code>client_id</code> str, optional - Client ID to use for the AWS SRP authentication. Defaults to <code>'1ec4fa3oriciupg94ugoi84kkk'</code></li> <li><code>default_region</code> str, optional - Default region to use for the initial AWS cognito requests. Defaults to <code>'us-west-2'</code></li> <li><code>verbose</code> bool, optional - Verbose class output (DEBUG severity). Defaults to <code>False</code></li> </ul>"}]}